{"version":3,"sources":["App.tsx","serviceWorker.ts","kaigyo.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","App","classes","className","AppBar","position","Toolbar","Typography","variant","Boolean","window","location","hostname","match","Kaigyo","props","state","message","num","ch_message","Grid","container","style","justifyContent","item","xs","TextField","id","label","multiline","rows","fullWidth","margin","value","this","onChange","e","setState","target","placeholder","x","parseInt","Number","isNaN","Button","color","onClick","count","i","length","marginTop","replace","s","String","fromCharCode","charCodeAt","React","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"qPAMMA,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaL,EAAMM,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,QAKP,SAASK,IACpB,IAAMC,EAAUX,IAEhB,OACI,yBAAKY,UAAWD,EAAQP,MACpB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,OAA5C,mECfAS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4DCqLSC,E,kDAnLX,WAAYC,GAAqB,IAAD,8BAC5B,cAAMA,IAEDC,MAAQ,CACTC,QAAS,GACTC,IAAI,GACJC,WAAW,IANa,E,qDAWhB,IAAD,OA8GX,OACI,2BACI,gBAACC,EAAA,EAAD,CAAMC,WAAS,EAACtB,QAAS,EAAGuB,MAAO,CAACC,eAAe,WAC/C,gBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACX,gBAACC,EAAA,EAAD,CACIC,GAAG,oBACHC,MAAM,qEACNC,WAAS,EACTC,KAAK,KACLC,WAAS,EACTC,OAAO,SACPxB,QAAQ,WACRyB,MAAOC,KAAKlB,MAAMC,QAClBkB,SA5BD,SAACC,GAChB,EAAKC,SAAS,CACVpB,QAAQmB,EAAEE,OAAOL,YA6Bb,gBAACb,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAEX,gBAACC,EAAA,EAAD,CACIC,GAAG,iBACHC,MAAM,4BACNW,YAAY,cACZP,OAAO,SACPG,SAjCJ,SAACC,GACb,IAAII,EAAEC,SAASL,EAAEE,OAAOL,OAErBS,OAAOC,MAAMH,KACZA,EAAE,GAEN,EAAKH,SAAS,CACVnB,IAAIsB,KA2BQP,MAAOC,KAAKlB,MAAME,MAEtB,gBAAC0B,EAAA,EAAD,CAAQpC,QAAQ,WAAWqC,MAAM,UAAUvB,MAAO,CAACC,eAAe,UAAWuB,QAvI9E,WAKX,IAJA,IAAI7B,EAAQ,EAAKD,MAAMC,QACnBC,EAAI,EAAKF,MAAME,IACfC,EAAW,GACX4B,EAAM,EACFC,EAAE,EAAEA,EAAE/B,EAAQgC,OAAOD,IACV,MAAZ/B,EAAQ+B,IAKD,GAAPD,GAAUA,EAAM7B,GAAK,IACpBC,GAAsB,MAE1B4B,IACA5B,GAAsBF,EAAQ+B,KAR1BD,EAAM,EACN5B,GAAsB,MAU9B,EAAKkB,SAAS,CAAClB,WAAWA,MAqHd,8CAGA,gBAACyB,EAAA,EAAD,CAAQpC,QAAQ,WAAYqC,MAAM,UAAUvB,MAAO,CAACC,eAAe,SAAS2B,UAAU,QAASJ,QArH7F,WACd,IAAI7B,EAAQ,EAAKD,MAAMC,QACvBA,EAAQA,EAAQkC,QAAQ,OAAO,IAI/B,IAHA,IAAIjC,EAAI,EAAKF,MAAME,IACfC,EAAW,GACX4B,EAAM,EACFC,EAAE,EAAEA,EAAE/B,EAAQgC,OAAOD,IACV,MAAZ/B,EAAQ+B,KAGD,GAAPD,GAAUA,EAAM7B,GAAK,IACpBC,GAAsB,MAE1B4B,IACA5B,GAAsBF,EAAQ+B,IAGlC,EAAKX,SAAS,CAAClB,WAAWA,MAoGd,yCAIA,gBAACyB,EAAA,EAAD,CAAQpC,QAAQ,WAAWqC,MAAM,UAAUvB,MAAO,CAACC,eAAe,SAAS2B,UAAU,QAASJ,QArGpF,WACtB,IAAI7B,EAAQ,EAAKD,MAAMC,QAEvBA,GADAA,EAAQA,EAAQkC,QAAQ,OAAO,KACfA,QAAQ,gBAAgB,SAASC,GAC7C,OAAOC,OAAOC,aAAaF,EAAEG,WAAW,GAAK,UAKjD,IAHA,IAAIrC,EAAI,EAAKF,MAAME,IACfC,EAAW,GACX4B,EAAM,EACFC,EAAE,EAAEA,EAAE/B,EAAQgC,OAAOD,IACV,MAAZ/B,EAAQ+B,KAGD,GAAPD,GAAUA,EAAM7B,GAAK,IACpBC,GAAsB,KACtB4B,EAAM,GAEVA,IACA5B,GAAsBF,EAAQ+B,IAGlC,EAAKX,SAAS,CAAClB,WAAWA,MAgFd,8CAGA,gBAACyB,EAAA,EAAD,CAAQpC,QAAQ,WAAWqC,MAAM,UAAUvB,MAAO,CAACC,eAAe,SAAS2B,UAAU,QAASJ,QAhFvF,WACnB,IAAI7B,EAAQ,EAAKD,MAAMC,QAEvBA,GADAA,EAAQA,EAAQkC,QAAQ,OAAO,KACfA,QAAQ,gBAAgB,SAASC,GAC7C,OAAOC,OAAOC,aAAaF,EAAEG,WAAW,GAAK,UAKjD,IAHA,IAAIrC,EAAI,EAAKF,MAAME,IACfC,EAAW,GACX4B,EAAM,EACFC,EAAE,EAAEA,EAAE/B,EAAQgC,OAAOD,IACV,MAAZ/B,EAAQ+B,KAGI,UAAZ/B,EAAQ+B,IAKD,GAAPD,GAAUA,EAAM7B,GAAK,IACpBC,GAAsB,KACtB4B,EAAM,GAEVA,IACA5B,GAAsBF,EAAQ+B,KAT1B7B,GAAsB,WACtB4B,EAAM,IAWd,EAAKV,SAAS,CAAClB,WAAWA,MAsDd,yCAIJ,gBAACC,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACX,gBAACC,EAAA,EAAD,CACIC,GAAG,oBACHC,MAAM,yDACNC,WAAS,EACTC,KAAK,KACLC,WAAS,EACTC,OAAO,SACPxB,QAAQ,WACRyB,MAAOC,KAAKlB,MAAMG,oB,GA3KzBqC,aCZrBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC1D,EAAD,MACA,kBAAC,EAAD,OAEF2D,SAASC,eAAe,SF+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpD,c","file":"static/js/main.c74a29c7.chunk.js","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        title: {\n            flexGrow: 1,\n        },\n    }),\n);\n\nexport default function App() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        改行コードいれった〜\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {Grid} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\ninterface IKaigyoProps{\n\n}\ninterface IKaigyoState {\n    message:string;\n    num:number;\n    ch_message:string;\n\n}\n\n\nclass Kaigyo extends React.Component<IKaigyoProps,IKaigyoState>{\n    constructor(props:IKaigyoProps) {\n        super(props);\n\n        this.state = {\n            message: '',\n            num:20,\n            ch_message:''\n        };\n\n    }\n\n    public render(){\n        const insert_n=()=>{\n            let message=this.state.message;\n            let num=this.state.num;\n            let ch_message=\"\";\n            let count=0;\n            for(let i=0;i<message.length;i++){\n                if(message[i]=='\\n'){\n                    count=0;\n                    ch_message=ch_message+'\\n';\n                    continue;\n                }\n                if(count!=0&&count%num==0){\n                    ch_message=ch_message+'\\n';\n                }\n                count++;\n                ch_message=ch_message+message[i];\n\n            }\n            this.setState({ch_message:ch_message});\n\n        }\n        const ch_insert_n=()=>{\n            let message=this.state.message;\n            message=message.replace(/\\s+/g,\"\");\n            let num=this.state.num;\n            let ch_message=\"\";\n            let count=0;\n            for(let i=0;i<message.length;i++){\n                if(message[i]=='\\n'){\n                    continue;\n                }\n                if(count!=0&&count%num==0){\n                    ch_message=ch_message+'\\n';\n                }\n                count++;\n                ch_message=ch_message+message[i];\n\n            }\n            this.setState({ch_message:ch_message});\n\n        }\n        const ch_insert_n_han2zen=()=>{\n            let message=this.state.message;\n            message=message.replace(/\\s+/g,\"\");\n            message=message.replace(/[A-Za-z0-9]/g, function(s:string) {\n                return String.fromCharCode(s.charCodeAt(0) + 0xFEE0);\n            });\n            let num=this.state.num;\n            let ch_message=\"\";\n            let count=0;\n            for(let i=0;i<message.length;i++){\n                if(message[i]=='\\n'){\n                    continue;\n                }\n                if(count!=0&&count%num==0){\n                    ch_message=ch_message+'\\n';\n                    count=0;\n                }\n                count++;\n                ch_message=ch_message+message[i];\n\n            }\n            this.setState({ch_message:ch_message});\n\n        }\n        const ch_insert_n_maru=()=>{\n            let message=this.state.message;\n            message=message.replace(/\\s+/g,\"\");\n            message=message.replace(/[A-Za-z0-9]/g, function(s:string) {\n                return String.fromCharCode(s.charCodeAt(0) + 0xFEE0);\n            });\n            let num=this.state.num;\n            let ch_message=\"\";\n            let count=0;\n            for(let i=0;i<message.length;i++){\n                if(message[i]=='\\n'){\n                    continue;\n                }\n                if(message[i]=='。'){\n                    ch_message=ch_message+'。'+'\\n';\n                    count=0;\n                    continue;\n                }\n                if(count!=0&&count%num==0){\n                    ch_message=ch_message+'\\n';\n                    count=0;\n                }\n                count++;\n                ch_message=ch_message+message[i];\n\n            }\n            this.setState({ch_message:ch_message});\n\n        }\n        const handleChange=(e:React.ChangeEvent<HTMLInputElement>)=>{\n            this.setState({\n                message:e.target.value,\n            })\n        }\n        const handlenum=(e:React.ChangeEvent<HTMLInputElement>)=>{\n            let x=parseInt(e.target.value);\n            //console.log(x);\n            if(Number.isNaN(x)){\n                x=0;\n            }\n            this.setState({\n                num:x,\n            })\n        }\n        return (\n            <div>\n                <Grid container spacing={2} style={{justifyContent:\"center\"}}>\n                    <Grid item xs={5}>\n                        <TextField\n                            id=\"outlined-textarea\"\n                            label=\"文章を入力してください\"\n                            multiline\n                            rows=\"20\"\n                            fullWidth\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            value={this.state.message}\n                            onChange={handleChange}\n                        />\n                    </Grid>\n                    <Grid item xs={1} >\n\n                        <TextField\n                            id=\"standard-basic\"\n                            label=\"N文字ごと\"\n                            placeholder=\"Placeholder\"\n                            margin=\"normal\"\n                            onChange={handlenum}\n                            value={this.state.num}\n                        />\n                        <Button variant=\"outlined\" color=\"primary\" style={{justifyContent:\"center\"}} onClick={insert_n}>\n                            改行無視しない\n                        </Button>\n                        <Button variant=\"outlined\"  color=\"primary\" style={{justifyContent:\"center\",marginTop:\"10px\"}} onClick={ch_insert_n}>\n                            改行,空白無視\n                        </Button>\n\n                        <Button variant=\"outlined\" color=\"primary\" style={{justifyContent:\"center\",marginTop:\"10px\"}} onClick={ch_insert_n_han2zen}>\n                            行末をそろえる\n                        </Button>\n                        <Button variant=\"outlined\" color=\"primary\" style={{justifyContent:\"center\",marginTop:\"10px\"}} onClick={ch_insert_n_maru}>\n                            。で改行する\n                        </Button>\n                    </Grid>\n                    <Grid item xs={5}>\n                        <TextField\n                            id=\"outlined-textarea\"\n                            label=\"改行コードを挿入済\"\n                            multiline\n                            rows=\"20\"\n                            fullWidth\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            value={this.state.ch_message}\n                        />\n                    </Grid>\n\n                </Grid>\n            </div>\n        );\n    }\n}\nexport default Kaigyo;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Kaigyo from \"./kaigyo\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <Kaigyo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}